---
# CI E2E test configuration scenario using locally build images and manifests for:

images:
# Use local dev images for kubemark (use make docker-build-e2e to create the image before running the test);
- name: gcr.io/k8s-staging-cluster-api/cluster-api-kubemark-controller-amd64:dev
  loadBehavior: mustLoad
# Pre-load other images if available locally, so the management cluster starts quickly and the test is more resilient to network issues.
- name: registry.k8s.io/cluster-api/cluster-api-controller:v1.3.1
  loadBehavior: tryLoad
- name: registry.k8s.io/cluster-api/kubeadm-bootstrap-controller:v1.3.1
  loadBehavior: tryLoad
- name: registry.k8s.io/cluster-api/kubeadm-control-plane-controller:v1.3.1
  loadBehavior: tryLoad
- name: gcr.io/k8s-staging-cluster-api/capd-manager:v1.3.1
  loadBehavior: tryLoad
- name: quay.io/jetstack/cert-manager-cainjector:v1.10.1
  loadBehavior: tryLoad
- name: quay.io/jetstack/cert-manager-webhook:v1.10.1
  loadBehavior: tryLoad
- name: quay.io/jetstack/cert-manager-controller:v1.10.1
  loadBehavior: tryLoad

providers:
- name: cluster-api
  type: CoreProvider
  versions:
  - name: v1.3.1
    value: "https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.3.1/core-components.yaml"
    type: "url"
    contract: v1beta1
    replacements:
    - old: --metrics-addr=127.0.0.1:8080
      new: --metrics-addr=:8080
    files:
    - sourcePath: "../data/capi/metadata.yaml"
- name: kubeadm # required when creating control plane machines with the docker provider.
  type: BootstrapProvider
  versions:
  - name: v1.3.1
    value: "https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.3.1/bootstrap-components.yaml"
    type: "url"
    contract: v1beta1
    replacements:
    - old: --metrics-addr=127.0.0.1:8080
      new: --metrics-addr=:8080
    files:
    - sourcePath: "../data/capi/metadata.yaml"
- name: kubeadm # required when creating control plane machines with the docker provider.
  type: ControlPlaneProvider
  versions:
  - name: v1.3.1
    value: "https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.3.1/control-plane-components.yaml"
    type: "url"
    contract: v1beta1
    replacements:
    - old: --metrics-addr=127.0.0.1:8080
      new: --metrics-addr=:8080
    files:
    - sourcePath: "../data/capi/metadata.yaml"
- name: docker
  type: InfrastructureProvider
  versions:
  - name: v1.3.1
    value: "https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.3.1/infrastructure-components-development.yaml"
    type: "url"
    contract: v1beta1
    replacements:
    - old: --metrics-addr=127.0.0.1:8080
      new: --metrics-addr=:8080
    files:
    - sourcePath: "../data/capi/metadata.yaml"
- name: kubemark
  type: InfrastructureProvider
  versions:
    - name: v0.4.99 # next; use manifest from source files
      value: ../../../config
      replacements:
        - old: --metrics-bind-addr=localhost:8080
          new: --metrics-addr=:8080
      files:
      - sourcePath: "../data/kubemark/metadata.yaml"
      # Add cluster templates
      - sourcePath: "../data/kubemark/cluster-template.yaml"
      - sourcePath: "../data/kubemark/cluster-template-autoscaler.yaml"
      # Add the autoscaler deployment.
      # Note: we are adding the autoscaler deployment here because the test assumes it exists in the latest version of the kubemark provider.
      - sourcePath: "../data/autoscaler/autoscaler-to-workload-management.yaml"
      - sourcePath: "../data/autoscaler/autoscaler-to-workload-workload.yaml"

variables:
  # Enabling Cluster API feature flags by setting the env variables.
  EXP_CLUSTER_RESOURCE_SET: "true"
  EXP_KUBEADM_BOOTSTRAP_FORMAT_IGNITION: "true"
  EXP_MACHINE_POOL: "true"
  CLUSTER_TOPOLOGY: "true"
  EXP_RUNTIME_SDK: "true"

  # KindCluster settings
  KUBERNETES_VERSION_MANAGEMENT: "v1.25.3"
  IP_FAMILY: "IPv4"

  # CNI settings
  CNI: "./data/cni/kindnet.yaml"

  # Workload cluster settings
  KUBERNETES_VERSION: "v1.25.3"
  DOCKER_SERVICE_DOMAIN: "cluster.local"
  DOCKER_SERVICE_CIDRS: "10.128.0.0/12"
  DOCKER_POD_CIDRS: "192.168.0.0/16"


intervals:
  default/wait-controllers: ["3m", "10s"]
  default/wait-cluster: ["5m", "10s"]
  default/wait-control-plane: ["10m", "10s"]
  default/wait-worker-nodes: ["5m", "10s"]
  default/wait-machine-pool-nodes: ["5m", "10s"]
  default/wait-delete-cluster: ["3m", "10s"]
  default/wait-autoscaler: ["3m", "10s"]
